{"version":3,"sources":["ListItem.js","App.js","reportWebVitals.js","index.js"],"names":["ListItem","props","React","useState","item","completed","isDone","setIsDone","isDeleted","setIsDeleted","className","color","onClick","setCompleted","key","icon","faCheckSquare","faSquare","style","alignItems","justifyContent","opacity","textDecoration","text","backgroundColor","border","outline","width","fontSize","type","value","onChange","e","updateItem","target","faMinusCircle","setTimeout","deleteItm","App","items","setItems","currentItem","setCurrentItem","status","setStatus","filteredTodos","setFiltredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","localTodos","parse","getLocalTodos","filterHandler","useCallback","filter","deleteItem","filteredItems","setUpdate","map","id","onSubmit","preventDefault","newItem","newItems","prevState","Date","now","placeholder","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.863dcc47.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItem.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinusCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faSquare } from '@fortawesome/free-regular-svg-icons';\nimport { faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport 'animate.css/animate.css';\nconst ListItem = (props) => {\n  const [isDone, setIsDone] = React.useState(props.item.completed);\n  const [isDeleted, setIsDeleted] = React.useState(false);\n  \n  return (\n    <div\n      className={\n        isDeleted\n          ? 'list-wrapper animate__animated animate__hinge'\n          : 'list-wrapper animate__animated animate__backInLeft'\n      }\n    >\n      <div className='list'>\n        <span className='checkbox'>\n          {' '}\n          <FontAwesomeIcon\n            color='#2e294e'\n            onClick={() => {\n              setIsDone(!isDone);\n              props.setCompleted(!isDone, props.item.key);\n            }}\n            icon={isDone ? faCheckSquare : faSquare}\n          />\n        </span>\n        {!isDone ? (\n          <input\n            style={{\n              backgroundColor: 'transparent',\n              border: 0,\n              color: '#2e294e',\n              outline: 'none',\n              width: '100%',\n              fontSize: 18,\n            }}\n            type='text'\n            value={props.item.text}\n            onChange={(e) => {\n              props.updateItem(e.target.value, props.item.key);\n            }}\n          />\n        ) : (\n          <span\n            style={{\n              alignItems: 'center',\n              justifyContent: 'center',\n              opacity: 0.5,\n              textDecoration: 'line-through',\n              color: '#2e294e',\n            }}\n          >\n            {props.item.text}\n          </span>\n        )}\n        {/* {item.text} */}\n      </div>\n      <span>\n        <FontAwesomeIcon\n          color='white'\n          icon={faMinusCircle}\n          onClick={() => {\n            setIsDeleted(!isDeleted);\n            setTimeout(() => {\n              props.deleteItm(props.item.key);\n            }, 2000);\n          }}\n        />\n      </span>\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React, { useCallback } from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nfunction App() {\n  const [items, setItems] = React.useState([]);\n  const [currentItem, setCurrentItem] = React.useState({ text: '', key: null });\n  const [status, setStatus] = React.useState('uncompleted');\n  const [filteredTodos, setFiltredTodos] = React.useState([]);\n\n  React.useEffect(() => {\n    const getLocalTodos = () => {\n      if (localStorage.getItem('items') === null) {\n        localStorage.setItem('items', JSON.stringify([]));\n      } else {\n        let localTodos = JSON.parse(localStorage.getItem('items'));\n        setItems(localTodos);\n      }\n    };\n    getLocalTodos();\n  }, []);\n\n  const filterHandler = useCallback(() => {\n    switch (status) {\n      case 'completed':\n        setFiltredTodos(items.filter((item) => item.completed === true));\n        break;\n      case 'uncompleted':\n        setFiltredTodos(items.filter((item) => item.completed === false));\n        break;\n      default:\n        setFiltredTodos(items);\n        break;\n    }\n  }, [items, status]);\n\n  React.useEffect(() => {\n    const saveLocalTodos = () => {\n      localStorage.setItem('items', JSON.stringify(items));\n    };\n    filterHandler();\n    saveLocalTodos();\n  }, [filterHandler, items, status]);\n\n  const handleInput = (e) => {\n    const value = e.target.value;\n    setCurrentItem((prevState) => ({\n      ...prevState,\n      text: value,\n      key: Date.now(),\n      completed: false,\n    }));\n  };\n\n  const addItem = (e) => {\n    e.preventDefault();\n    const newItem = currentItem;\n    if (currentItem.text !== '') {\n      const newItems = [...items, newItem];\n      setItems(newItems);\n      setCurrentItem((prevState) => ({\n        ...prevState,\n        text: '',\n        key: '',\n      }));\n    }\n  };\n\n  const deleteItem = (key) => {\n    const filteredItems = items.filter((item) => item.key !== key);\n    setItems(filteredItems);\n  };\n\n  const setUpdate = (text, key) => {\n    setItems(\n      items.map((item) => {\n        if (item.key === key) {\n          return {\n            ...item,\n            text: text,\n          };\n        }\n        return item;\n      })\n    );\n  };\n\n  const setCompleted = (completed, key) => {\n    setItems(\n      items.map((item) => {\n        if (item.key === key) {\n          return {\n            ...item,\n            completed: completed,\n          };\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className='App'>\n      <header>\n        <form id='to-do-form' onSubmit={addItem}>\n          <input\n            type='text'\n            value={currentItem.text}\n            onChange={handleInput}\n            placeholder='Enter your text here...'\n          />\n          <button type='submit'>Add</button>\n          <div className='form-group mt-3 pr-4'>\n            <select\n              defaultValue={status}\n              className='form-control'\n              onChange={(e) => setStatus(e.target.value)}\n            >\n              <option value='all'>All</option>\n              <option value='completed'>Completed</option>\n              <option value='uncompleted'>Uncompleted</option>\n            </select>\n          </div>\n        </form>\n        <hr style={{ backgroundColor: 'white' }} />\n        {filteredTodos.map((item) => {\n          return (\n            <ListItem\n              key={item.key}\n              item={item}\n              deleteItm={deleteItem}\n              updateItem={setUpdate}\n              setCompleted={setCompleted}\n            />\n          );\n        })}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}